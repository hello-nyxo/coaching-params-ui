{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","duration","setDuration","jetlag","setJetlag","consistency","setConsistency","efficiency","setEfficiency","eveningType","setEveningType","morningType","setMorningType","quality","setQuality","className","class","Input","value","type","min","max","onChange","event","target","styled","input","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4ZA8HeA,MA1Hf,WAAgB,IAAD,EACmBC,mBAAS,GAD5B,mBACNC,EADM,KACIC,EADJ,OAEeF,mBAAS,GAFxB,mBAENG,EAFM,KAEEC,EAFF,OAGyBJ,mBAAS,GAHlC,mBAGNK,EAHM,KAGOC,EAHP,OAIuBN,mBAAS,GAJhC,mBAINO,EAJM,KAIMC,EAJN,OAKyBR,mBAAS,GALlC,mBAKNS,EALM,KAKOC,EALP,OAMyBV,mBAAS,GANlC,mBAMNW,EANM,KAMOC,EANP,OAOiBZ,mBAAS,GAP1B,mBAONa,EAPM,KAOGC,EAPH,KAqCb,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,iBACb,yBAAKC,MAAM,gBAAX,IAA2B,2CAC3B,kBAACC,EAAD,CACEC,MAAOjB,EACPkB,KAAK,QACLC,IAAI,IACJC,IAAI,MACJL,MAAM,cACNM,SAtCqB,SAAAC,GAC3BrB,EAAYqB,EAAMC,OAAON,UAuCrB,0BAAMF,MAAM,cAAcf,GAE1B,yBAAKe,MAAM,gBAAX,IAA2B,gDAC3B,kBAACC,EAAD,CACEC,MAAOf,EACPgB,KAAK,QACLC,IAAI,IACJC,IAAI,MACJL,MAAM,cACNM,SA7CmB,SAAAC,GACzBnB,EAAUmB,EAAMC,OAAON,UA8CnB,0BAAMF,MAAM,cAAcb,GAE1B,yBAAKa,MAAM,gBAAX,IAA2B,8CAC3B,kBAACC,EAAD,CACEC,MAAOb,EACPc,KAAK,QACLC,IAAI,IACJC,IAAI,MACJL,MAAM,cACNM,SApDwB,SAAAC,GAC9BjB,EAAeiB,EAAMC,OAAON,UAqDxB,0BAAMF,MAAM,cAAcX,GAE1B,yBAAKW,MAAM,gBAAX,IAA2B,6CAC3B,kBAACC,EAAD,CACEC,MAAOX,EACPY,KAAK,QACLC,IAAI,IACJC,IAAI,MACJL,MAAM,cACNM,SA3DuB,SAAAC,GAC7Bf,EAAce,EAAMC,OAAON,UA4DvB,0BAAMF,MAAM,cAAcT,GAE1B,yBAAKS,MAAM,gBAAX,IAA2B,+CAC3B,kBAACC,EAAD,CACEC,MAAOT,EACPU,KAAK,QACLC,IAAI,IACJC,IAAI,MACJL,MAAM,cACNM,SAlEwB,SAAAC,GAC9Bb,EAAea,EAAMC,OAAON,UAmExB,0BAAMF,MAAM,cAAcP,GAE1B,yBAAKO,MAAM,gBAAX,IAA2B,+CAC3B,kBAACC,EAAD,CACEC,MAAOP,EACPQ,KAAK,QACLC,IAAI,IACJC,IAAI,MACJL,MAAM,cACNM,SAzEwB,SAAAC,GAC9BX,EAAeW,EAAMC,OAAON,UA0ExB,0BAAMF,MAAM,cAAcL,GAE1B,yBAAKK,MAAM,gBAAX,IAA2B,gDAC3B,kBAACC,EAAD,CACEC,MAAOL,EACPM,KAAK,QACLC,IAAI,IACJC,IAAI,MACJL,MAAM,cACNM,SAhFoB,SAAAC,GAC1BT,EAAWS,EAAMC,OAAON,UAiFpB,0BAAMF,MAAM,cAAcH,MAS5BI,EAAQQ,IAAOC,MAAV,KCpHSC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.179c23e3.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport \"./App.css\";\n\nfunction App() {\n  const [duration, setDuration] = useState(0);\n  const [jetlag, setJetlag] = useState(0);\n  const [consistency, setConsistency] = useState(0);\n  const [efficiency, setEfficiency] = useState(0);\n  const [eveningType, setEveningType] = useState(0);\n  const [morningType, setMorningType] = useState(0);\n  const [quality, setQuality] = useState(0);\n\n  const handleDurationChange = event => {\n    setDuration(event.target.value);\n  };\n\n  const handleJetlagChange = event => {\n    setJetlag(event.target.value);\n  };\n\n  const handleConsistencyChange = event => {\n    setConsistency(event.target.value);\n  };\n\n  const handleEfficiencyChange = event => {\n    setEfficiency(event.target.value);\n  };\n\n  const handleEveningTypeChange = event => {\n    setEveningType(event.target.value);\n  };\n\n  const handleMorningTypeChange = event => {\n    setMorningType(event.target.value);\n  };\n\n  const handleQualityChange = event => {\n    setQuality(event.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"gridContainer\">\n        <div class=\"sliderHeader\"> <h2> Duration </h2></div>\n        <Input\n          value={duration}\n          type=\"range\"\n          min=\"0\"\n          max=\"100\"\n          class=\"sliderRange\"\n          onChange={handleDurationChange}\n        />\n        <span class=\"valueField\">{duration}</span>\n\n        <div class=\"sliderHeader\"> <h2> Social Jetlag </h2></div>\n        <Input\n          value={jetlag}\n          type=\"range\"\n          min=\"0\"\n          max=\"100\"\n          class=\"sliderRange\"\n          onChange={handleJetlagChange}\n        />\n        <span class=\"valueField\">{jetlag}</span>\n\n        <div class=\"sliderHeader\"> <h2> Consistency </h2></div>\n        <Input\n          value={consistency}\n          type=\"range\"\n          min=\"0\"\n          max=\"100\"\n          class=\"sliderRange\"\n          onChange={handleConsistencyChange}\n        />\n        <span class=\"valueField\">{consistency}</span>\n\n        <div class=\"sliderHeader\"> <h2> Efficiency </h2></div>\n        <Input\n          value={efficiency}\n          type=\"range\"\n          min=\"0\"\n          max=\"100\"\n          class=\"sliderRange\"\n          onChange={handleEfficiencyChange}\n        />\n        <span class=\"valueField\">{efficiency}</span>\n\n        <div class=\"sliderHeader\"> <h2> Evening Type </h2></div>\n        <Input\n          value={eveningType}\n          type=\"range\"\n          min=\"0\"\n          max=\"100\"\n          class=\"sliderRange\"\n          onChange={handleEveningTypeChange}\n        />\n        <span class=\"valueField\">{eveningType}</span>\n\n        <div class=\"sliderHeader\"> <h2> Morning Type </h2></div>\n        <Input\n          value={morningType}\n          type=\"range\"\n          min=\"0\"\n          max=\"100\"\n          class=\"sliderRange\"\n          onChange={handleMorningTypeChange}\n        />\n        <span class=\"valueField\">{morningType}</span>\n\n        <div class=\"sliderHeader\"> <h2> Sleep Quality </h2></div>\n        <Input\n          value={quality}\n          type=\"range\"\n          min=\"0\"\n          max=\"100\"\n          class=\"sliderRange\"\n          onChange={handleQualityChange}\n        />\n        <span class=\"valueField\">{quality}</span>\n\n      </div>\n    </div >\n  );\n}\n\nexport default App;\n\nconst Input = styled.input`\n  background-color: red;\n  margin: 20px;\n  width: 90%;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}